// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_message_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_message_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_message_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_message_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_message_2eproto;
namespace proto_example {
class Message;
struct MessageDefaultTypeInternal;
extern MessageDefaultTypeInternal _Message_default_instance_;
class Message_OtherReceiver;
struct Message_OtherReceiverDefaultTypeInternal;
extern Message_OtherReceiverDefaultTypeInternal _Message_OtherReceiver_default_instance_;
}  // namespace proto_example
PROTOBUF_NAMESPACE_OPEN
template<> ::proto_example::Message* Arena::CreateMaybeMessage<::proto_example::Message>(Arena*);
template<> ::proto_example::Message_OtherReceiver* Arena::CreateMaybeMessage<::proto_example::Message_OtherReceiver>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace proto_example {

enum Message_Priority : int {
  Message_Priority_URGENT = 0,
  Message_Priority_IMPORTANT = 1,
  Message_Priority_REGULAR = 2,
  Message_Priority_ADVERTISE = 3,
  Message_Priority_Message_Priority_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Message_Priority_Message_Priority_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Message_Priority_IsValid(int value);
constexpr Message_Priority Message_Priority_Priority_MIN = Message_Priority_URGENT;
constexpr Message_Priority Message_Priority_Priority_MAX = Message_Priority_ADVERTISE;
constexpr int Message_Priority_Priority_ARRAYSIZE = Message_Priority_Priority_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Message_Priority_descriptor();
template<typename T>
inline const std::string& Message_Priority_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Message_Priority>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Message_Priority_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Message_Priority_descriptor(), enum_t_value);
}
inline bool Message_Priority_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Message_Priority* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Message_Priority>(
    Message_Priority_descriptor(), name, value);
}
// ===================================================================

class Message_OtherReceiver final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto_example.Message.OtherReceiver) */ {
 public:
  inline Message_OtherReceiver() : Message_OtherReceiver(nullptr) {}
  ~Message_OtherReceiver() override;
  explicit PROTOBUF_CONSTEXPR Message_OtherReceiver(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Message_OtherReceiver(const Message_OtherReceiver& from);
  Message_OtherReceiver(Message_OtherReceiver&& from) noexcept
    : Message_OtherReceiver() {
    *this = ::std::move(from);
  }

  inline Message_OtherReceiver& operator=(const Message_OtherReceiver& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message_OtherReceiver& operator=(Message_OtherReceiver&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message_OtherReceiver& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message_OtherReceiver* internal_default_instance() {
    return reinterpret_cast<const Message_OtherReceiver*>(
               &_Message_OtherReceiver_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Message_OtherReceiver& a, Message_OtherReceiver& b) {
    a.Swap(&b);
  }
  inline void Swap(Message_OtherReceiver* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message_OtherReceiver* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message_OtherReceiver* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Message_OtherReceiver>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Message_OtherReceiver& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Message_OtherReceiver& from) {
    Message_OtherReceiver::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message_OtherReceiver* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto_example.Message.OtherReceiver";
  }
  protected:
  explicit Message_OtherReceiver(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReceiverNameFieldNumber = 1,
  };
  // string receiver_name = 1;
  void clear_receiver_name();
  const std::string& receiver_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_receiver_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_receiver_name();
  PROTOBUF_NODISCARD std::string* release_receiver_name();
  void set_allocated_receiver_name(std::string* receiver_name);
  private:
  const std::string& _internal_receiver_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_receiver_name(const std::string& value);
  std::string* _internal_mutable_receiver_name();
  public:

  // @@protoc_insertion_point(class_scope:proto_example.Message.OtherReceiver)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr receiver_name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class Message final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto_example.Message) */ {
 public:
  inline Message() : Message(nullptr) {}
  ~Message() override;
  explicit PROTOBUF_CONSTEXPR Message(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Message(const Message& from);
  Message(Message&& from) noexcept
    : Message() {
    *this = ::std::move(from);
  }

  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message& operator=(Message&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message* internal_default_instance() {
    return reinterpret_cast<const Message*>(
               &_Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Message& a, Message& b) {
    a.Swap(&b);
  }
  inline void Swap(Message* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Message>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Message& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Message& from) {
    Message::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto_example.Message";
  }
  protected:
  explicit Message(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Message_OtherReceiver OtherReceiver;

  typedef Message_Priority Priority;
  static constexpr Priority URGENT =
    Message_Priority_URGENT;
  static constexpr Priority IMPORTANT =
    Message_Priority_IMPORTANT;
  static constexpr Priority REGULAR =
    Message_Priority_REGULAR;
  static constexpr Priority ADVERTISE =
    Message_Priority_ADVERTISE;
  static inline bool Priority_IsValid(int value) {
    return Message_Priority_IsValid(value);
  }
  static constexpr Priority Priority_MIN =
    Message_Priority_Priority_MIN;
  static constexpr Priority Priority_MAX =
    Message_Priority_Priority_MAX;
  static constexpr int Priority_ARRAYSIZE =
    Message_Priority_Priority_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Priority_descriptor() {
    return Message_Priority_descriptor();
  }
  template<typename T>
  static inline const std::string& Priority_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Priority>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Priority_Name.");
    return Message_Priority_Name(enum_t_value);
  }
  static inline bool Priority_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Priority* value) {
    return Message_Priority_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kReceiversFieldNumber = 6,
    kTitleFieldNumber = 2,
    kDateTimeFieldNumber = 3,
    kSenderNameFieldNumber = 4,
    kIdFieldNumber = 1,
    kPriorityFieldNumber = 5,
  };
  // repeated .proto_example.Message.OtherReceiver receivers = 6;
  int receivers_size() const;
  private:
  int _internal_receivers_size() const;
  public:
  void clear_receivers();
  ::proto_example::Message_OtherReceiver* mutable_receivers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto_example::Message_OtherReceiver >*
      mutable_receivers();
  private:
  const ::proto_example::Message_OtherReceiver& _internal_receivers(int index) const;
  ::proto_example::Message_OtherReceiver* _internal_add_receivers();
  public:
  const ::proto_example::Message_OtherReceiver& receivers(int index) const;
  ::proto_example::Message_OtherReceiver* add_receivers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto_example::Message_OtherReceiver >&
      receivers() const;

  // string title = 2;
  void clear_title();
  const std::string& title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // string date_time = 3;
  void clear_date_time();
  const std::string& date_time() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_date_time(ArgT0&& arg0, ArgT... args);
  std::string* mutable_date_time();
  PROTOBUF_NODISCARD std::string* release_date_time();
  void set_allocated_date_time(std::string* date_time);
  private:
  const std::string& _internal_date_time() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_date_time(const std::string& value);
  std::string* _internal_mutable_date_time();
  public:

  // string sender_name = 4;
  void clear_sender_name();
  const std::string& sender_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sender_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sender_name();
  PROTOBUF_NODISCARD std::string* release_sender_name();
  void set_allocated_sender_name(std::string* sender_name);
  private:
  const std::string& _internal_sender_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sender_name(const std::string& value);
  std::string* _internal_mutable_sender_name();
  public:

  // int32 id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // .proto_example.Message.Priority priority = 5;
  void clear_priority();
  ::proto_example::Message_Priority priority() const;
  void set_priority(::proto_example::Message_Priority value);
  private:
  ::proto_example::Message_Priority _internal_priority() const;
  void _internal_set_priority(::proto_example::Message_Priority value);
  public:

  // @@protoc_insertion_point(class_scope:proto_example.Message)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto_example::Message_OtherReceiver > receivers_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr date_time_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sender_name_;
    int32_t id_;
    int priority_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_message_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Message_OtherReceiver

// string receiver_name = 1;
inline void Message_OtherReceiver::clear_receiver_name() {
  _impl_.receiver_name_.ClearToEmpty();
}
inline const std::string& Message_OtherReceiver::receiver_name() const {
  // @@protoc_insertion_point(field_get:proto_example.Message.OtherReceiver.receiver_name)
  return _internal_receiver_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Message_OtherReceiver::set_receiver_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.receiver_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto_example.Message.OtherReceiver.receiver_name)
}
inline std::string* Message_OtherReceiver::mutable_receiver_name() {
  std::string* _s = _internal_mutable_receiver_name();
  // @@protoc_insertion_point(field_mutable:proto_example.Message.OtherReceiver.receiver_name)
  return _s;
}
inline const std::string& Message_OtherReceiver::_internal_receiver_name() const {
  return _impl_.receiver_name_.Get();
}
inline void Message_OtherReceiver::_internal_set_receiver_name(const std::string& value) {
  
  _impl_.receiver_name_.Set(value, GetArenaForAllocation());
}
inline std::string* Message_OtherReceiver::_internal_mutable_receiver_name() {
  
  return _impl_.receiver_name_.Mutable(GetArenaForAllocation());
}
inline std::string* Message_OtherReceiver::release_receiver_name() {
  // @@protoc_insertion_point(field_release:proto_example.Message.OtherReceiver.receiver_name)
  return _impl_.receiver_name_.Release();
}
inline void Message_OtherReceiver::set_allocated_receiver_name(std::string* receiver_name) {
  if (receiver_name != nullptr) {
    
  } else {
    
  }
  _impl_.receiver_name_.SetAllocated(receiver_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.receiver_name_.IsDefault()) {
    _impl_.receiver_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto_example.Message.OtherReceiver.receiver_name)
}

// -------------------------------------------------------------------

// Message

// int32 id = 1;
inline void Message::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t Message::_internal_id() const {
  return _impl_.id_;
}
inline int32_t Message::id() const {
  // @@protoc_insertion_point(field_get:proto_example.Message.id)
  return _internal_id();
}
inline void Message::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void Message::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:proto_example.Message.id)
}

// string title = 2;
inline void Message::clear_title() {
  _impl_.title_.ClearToEmpty();
}
inline const std::string& Message::title() const {
  // @@protoc_insertion_point(field_get:proto_example.Message.title)
  return _internal_title();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Message::set_title(ArgT0&& arg0, ArgT... args) {
 
 _impl_.title_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto_example.Message.title)
}
inline std::string* Message::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:proto_example.Message.title)
  return _s;
}
inline const std::string& Message::_internal_title() const {
  return _impl_.title_.Get();
}
inline void Message::_internal_set_title(const std::string& value) {
  
  _impl_.title_.Set(value, GetArenaForAllocation());
}
inline std::string* Message::_internal_mutable_title() {
  
  return _impl_.title_.Mutable(GetArenaForAllocation());
}
inline std::string* Message::release_title() {
  // @@protoc_insertion_point(field_release:proto_example.Message.title)
  return _impl_.title_.Release();
}
inline void Message::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  _impl_.title_.SetAllocated(title, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.title_.IsDefault()) {
    _impl_.title_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto_example.Message.title)
}

// string date_time = 3;
inline void Message::clear_date_time() {
  _impl_.date_time_.ClearToEmpty();
}
inline const std::string& Message::date_time() const {
  // @@protoc_insertion_point(field_get:proto_example.Message.date_time)
  return _internal_date_time();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Message::set_date_time(ArgT0&& arg0, ArgT... args) {
 
 _impl_.date_time_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto_example.Message.date_time)
}
inline std::string* Message::mutable_date_time() {
  std::string* _s = _internal_mutable_date_time();
  // @@protoc_insertion_point(field_mutable:proto_example.Message.date_time)
  return _s;
}
inline const std::string& Message::_internal_date_time() const {
  return _impl_.date_time_.Get();
}
inline void Message::_internal_set_date_time(const std::string& value) {
  
  _impl_.date_time_.Set(value, GetArenaForAllocation());
}
inline std::string* Message::_internal_mutable_date_time() {
  
  return _impl_.date_time_.Mutable(GetArenaForAllocation());
}
inline std::string* Message::release_date_time() {
  // @@protoc_insertion_point(field_release:proto_example.Message.date_time)
  return _impl_.date_time_.Release();
}
inline void Message::set_allocated_date_time(std::string* date_time) {
  if (date_time != nullptr) {
    
  } else {
    
  }
  _impl_.date_time_.SetAllocated(date_time, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.date_time_.IsDefault()) {
    _impl_.date_time_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto_example.Message.date_time)
}

// string sender_name = 4;
inline void Message::clear_sender_name() {
  _impl_.sender_name_.ClearToEmpty();
}
inline const std::string& Message::sender_name() const {
  // @@protoc_insertion_point(field_get:proto_example.Message.sender_name)
  return _internal_sender_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Message::set_sender_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.sender_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto_example.Message.sender_name)
}
inline std::string* Message::mutable_sender_name() {
  std::string* _s = _internal_mutable_sender_name();
  // @@protoc_insertion_point(field_mutable:proto_example.Message.sender_name)
  return _s;
}
inline const std::string& Message::_internal_sender_name() const {
  return _impl_.sender_name_.Get();
}
inline void Message::_internal_set_sender_name(const std::string& value) {
  
  _impl_.sender_name_.Set(value, GetArenaForAllocation());
}
inline std::string* Message::_internal_mutable_sender_name() {
  
  return _impl_.sender_name_.Mutable(GetArenaForAllocation());
}
inline std::string* Message::release_sender_name() {
  // @@protoc_insertion_point(field_release:proto_example.Message.sender_name)
  return _impl_.sender_name_.Release();
}
inline void Message::set_allocated_sender_name(std::string* sender_name) {
  if (sender_name != nullptr) {
    
  } else {
    
  }
  _impl_.sender_name_.SetAllocated(sender_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sender_name_.IsDefault()) {
    _impl_.sender_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto_example.Message.sender_name)
}

// .proto_example.Message.Priority priority = 5;
inline void Message::clear_priority() {
  _impl_.priority_ = 0;
}
inline ::proto_example::Message_Priority Message::_internal_priority() const {
  return static_cast< ::proto_example::Message_Priority >(_impl_.priority_);
}
inline ::proto_example::Message_Priority Message::priority() const {
  // @@protoc_insertion_point(field_get:proto_example.Message.priority)
  return _internal_priority();
}
inline void Message::_internal_set_priority(::proto_example::Message_Priority value) {
  
  _impl_.priority_ = value;
}
inline void Message::set_priority(::proto_example::Message_Priority value) {
  _internal_set_priority(value);
  // @@protoc_insertion_point(field_set:proto_example.Message.priority)
}

// repeated .proto_example.Message.OtherReceiver receivers = 6;
inline int Message::_internal_receivers_size() const {
  return _impl_.receivers_.size();
}
inline int Message::receivers_size() const {
  return _internal_receivers_size();
}
inline void Message::clear_receivers() {
  _impl_.receivers_.Clear();
}
inline ::proto_example::Message_OtherReceiver* Message::mutable_receivers(int index) {
  // @@protoc_insertion_point(field_mutable:proto_example.Message.receivers)
  return _impl_.receivers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto_example::Message_OtherReceiver >*
Message::mutable_receivers() {
  // @@protoc_insertion_point(field_mutable_list:proto_example.Message.receivers)
  return &_impl_.receivers_;
}
inline const ::proto_example::Message_OtherReceiver& Message::_internal_receivers(int index) const {
  return _impl_.receivers_.Get(index);
}
inline const ::proto_example::Message_OtherReceiver& Message::receivers(int index) const {
  // @@protoc_insertion_point(field_get:proto_example.Message.receivers)
  return _internal_receivers(index);
}
inline ::proto_example::Message_OtherReceiver* Message::_internal_add_receivers() {
  return _impl_.receivers_.Add();
}
inline ::proto_example::Message_OtherReceiver* Message::add_receivers() {
  ::proto_example::Message_OtherReceiver* _add = _internal_add_receivers();
  // @@protoc_insertion_point(field_add:proto_example.Message.receivers)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto_example::Message_OtherReceiver >&
Message::receivers() const {
  // @@protoc_insertion_point(field_list:proto_example.Message.receivers)
  return _impl_.receivers_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_example

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::proto_example::Message_Priority> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto_example::Message_Priority>() {
  return ::proto_example::Message_Priority_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_message_2eproto
